import java.util.Scanner;

public class Solution {

    // Definition for singly-linked list.
    static class ListNode {
        int val;
        ListNode next;
        ListNode(int val) { 
            this.val = val; 
        }
    }

    /**
     * Swaps every two adjacent nodes of a linked list by manipulating node pointers.
     * * @param head The head of the linked list.
     * @return The head of the modified linked list.
     */
    public ListNode swapPairs(ListNode head) {
        // 1. Create a dummy node to act as the preceding node to the head.
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        
        // 'prev' will always point to the node *before* the pair being swapped.
        ListNode prev = dummy;
        
        // Loop as long as there is a pair (at least two nodes) to swap.
        while (prev.next != null && prev.next.next != null) {
            
            // Define the two nodes in the pair
            ListNode first = prev.next;   // The first node (e.g., 1)
            ListNode second = first.next; // The second node (e.g., 2)
            
            // Perform the swap by relinking the pointers:
            
            // Step 1: Link 'prev' to the second node (2)
            prev.next = second;
            
            // Step 2: Link the first node (1) to the node after the second node (3)
            first.next = second.next;
            
            // Step 3: Link the second node (2) to the first node (1)
            second.next = first;
            
            // Move 'prev' to the position of the first node (1) 
            // to prepare for the next pair swap.
            prev = first; 
        }
        
        // The new head of the list is dummy.next
        return dummy.next;
    }

    // --- Helper methods for I/O and list creation (based on screenshots) ---

    // Method to create a linked list from an array of values
    public static ListNode createList(int[] values) {
        if (values == null || values.length == 0) {
            return null;
        }
        ListNode dummy = new ListNode(0);
        ListNode current = dummy;
        for (int val : values) {
            current.next = new ListNode(val);
            current = current.next;
        }
        return dummy.next;
    }

    // Method to print the linked list
    public static void printList(ListNode head) {
        ListNode current = head;
        while (current != null) {
            System.out.print(current.val + (current.next != null ? " " : ""));
            current = current.next;
        }
        System.out.println();
    }

    // Main method for testing and input processing (based on screenshots)
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        // Read number of nodes
        int n = scanner.nextInt();
        
        // Read node values
        int[] values = new int[n];
        for (int i = 0; i < n; i++) {
            values[i] = scanner.nextInt();
        }
        
        // Create the linked list
        ListNode head = createList(values);
        
        // Swap the pairs
        Solution solution = new Solution();
        ListNode newHead = solution.swapPairs(head);
        
        // Print the result
        printList(newHead);

        scanner.close();
    }
}
